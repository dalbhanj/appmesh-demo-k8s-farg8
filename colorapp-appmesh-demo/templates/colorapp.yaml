---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    appmesh.k8s.aws/sidecarInjectorWebhook: enabled
  name: {{.Values.APP_NAMESPACE}}
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: Mesh
metadata:
  name: {{.Values.MESH_NAME}}
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: colorgateway
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  serviceDiscovery:
    dns:
      hostName: colorgateway.{{.Values.APP_NAMESPACE}}.svc.cluster.local
  backends:
    - virtualService:
        virtualServiceName: colorteller.{{.Values.APP_NAMESPACE}}
    - virtualService:
        virtualServiceName: tcpecho.{{.Values.APP_NAMESPACE}}
  logging:
    accessLog:
      file:
        path: /dev/stdout
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: colorteller
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  serviceDiscovery:
    dns:
      hostName: colorteller.{{.Values.APP_NAMESPACE}}.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: colorteller-black
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  serviceDiscovery:
    dns:
      hostName: colorteller-black.{{.Values.APP_NAMESPACE}}.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: colorteller-blue
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  serviceDiscovery:
    dns:
      hostName: colorteller-blue.{{.Values.APP_NAMESPACE}}.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: colorteller-red
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  serviceDiscovery:
    dns:
      hostName: colorteller-red.{{.Values.APP_NAMESPACE}}.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualService
metadata:
  name: colorteller.{{.Values.APP_NAMESPACE}}
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  virtualRouter:
    listeners:
      - portMapping:
          port: 9080
          protocol: http
  routes:
    - name: color-route
      http:
        match:
          prefix: /
        action:
          weightedTargets:
            - virtualNodeName: colorteller
              weight: 1
            - virtualNodeName: colorteller-blue
              weight: 1
            - virtualNodeName: colorteller-black
              weight: 1
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualService
metadata:
  name: colorgateway.{{.Values.APP_NAMESPACE}}
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  virtualRouter:
    listeners:
      - portMapping:
          port: 9080
          protocol: http
  routes:
    - name: color-route
      http:
        match:
          prefix: /color
        action:
          weightedTargets:
            - virtualNodeName: colorgateway
              weight: 1
---
apiVersion: v1
kind: Service
metadata:
  name: colorgateway
  namespace: {{.Values.APP_NAMESPACE}}
  labels:
    app: colorgateway
spec:
  ports:
    - port: 9080
      name: http
  selector:
    app: colorgateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: colorgateway
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: colorgateway
      version: v1
  template:
    metadata:
      labels:
        app: colorgateway
        version: v1
    spec:
      containers:
        - name: colorgateway
          image: {{.Values.COLOR_GATEWAY_IMAGE}}
          ports:
            - containerPort: 9080
          env:
            - name: "SERVER_PORT"
              value: "9080"
            - name: "COLOR_TELLER_ENDPOINT"
              value: "colorteller.{{.Values.APP_NAMESPACE}}:9080"
            - name: "TCP_ECHO_ENDPOINT"
              value: "tcpecho.{{.Values.APP_NAMESPACE}}:2701"
---
apiVersion: v1
kind: Service
metadata:
  name: colorteller
  namespace: {{.Values.APP_NAMESPACE}}
  labels:
    app: colorteller
spec:
  ports:
    - port: 9080
      name: http
  selector:
    app: colorteller
    version: white
---

# white
apiVersion: apps/v1
kind: Deployment
metadata:
  name: colorteller
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: colorteller
      version: white
  template:
    metadata:
      labels:
        app: colorteller
        version: white
    spec:
      containers:
        - name: colorteller
          image: {{.Values.COLOR_TELLER_IMAGE}}
          ports:
            - containerPort: 9080
          env:
            - name: "SERVER_PORT"
              value: "9080"
            - name: "COLOR"
              value: "white"
---
# black
apiVersion: v1
kind: Service
metadata:
  name: colorteller-black
  namespace: {{.Values.APP_NAMESPACE}}
  labels:
    app: colorteller
    version: black
spec:
  ports:
    - port: 9080
      name: http
  selector:
    app: colorteller
    version: black
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: colorteller-black
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: colorteller
      version: black
  template:
    metadata:
      labels:
        app: colorteller
        version: black
    spec:
      containers:
        - name: colorteller
          image: {{.Values.COLOR_TELLER_IMAGE}}
          ports:
            - containerPort: 9080
          env:
            - name: "SERVER_PORT"
              value: "9080"
            - name: "COLOR"
              value: "black"
---
# blue
apiVersion: v1
kind: Service
metadata:
  name: colorteller-blue
  namespace: {{.Values.APP_NAMESPACE}}
  labels:
    app: colorteller
    version: blue
spec:
  ports:
    - port: 9080
      name: http
  selector:
    app: colorteller
    version: blue
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: colorteller-blue
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: colorteller
      version: blue
  template:
    metadata:
      labels:
        app: colorteller
        version: blue
    spec:
      containers:
        - name: colorteller
          image: {{.Values.COLOR_TELLER_IMAGE}}
          ports:
            - containerPort: 9080
          env:
            - name: "SERVER_PORT"
              value: "9080"
            - name: "COLOR"
              value: "blue"
---
# red
apiVersion: v1
kind: Service
metadata:
  name: colorteller-red
  namespace: {{.Values.APP_NAMESPACE}}
  labels:
    app: colorteller
    version: red
spec:
  ports:
    - port: 9080
      name: http
  selector:
    app: colorteller
    version: red
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: colorteller-red
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: colorteller
      version: red
  template:
    metadata:
      labels:
        app: colorteller
        version: red
    spec:
      containers:
        - name: colorteller
          image: {{.Values.COLOR_TELLER_IMAGE}}
          ports:
            - containerPort: 9080
          env:
            - name: "SERVER_PORT"
              value: "9080"
            - name: "COLOR"
              value: "red"
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: tcpecho
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  listeners:
    - portMapping:
        port: 2701
        protocol: tcp
  serviceDiscovery:
    dns:
      hostName: tcpecho.{{.Values.APP_NAMESPACE}}.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualService
metadata:
  name: tcpecho.{{.Values.APP_NAMESPACE}}
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  meshName: {{.Values.MESH_NAME}}
  virtualRouter:
    listeners:
      - portMapping:
          port: 2701
          protocol: tcp
  routes:
    - name: tcpecho-route
      tcp:
        action:
          weightedTargets:
            - virtualNodeName: tcpecho
              weight: 1
---
apiVersion: v1
kind: Service
metadata:
  name: tcpecho
  namespace: {{.Values.APP_NAMESPACE}}
  labels:
    app: tcpecho
spec:
  ports:
    - protocol: "TCP"
      port: 2701
      targetPort: 2701
  selector:
    app: tcpecho
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tcpecho
  namespace: {{.Values.APP_NAMESPACE}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tcpecho
      version: v1
  template:
    metadata:
      labels:
        app: tcpecho
        version: v1
    spec:
      containers:
        - name: tcpecho
          image: cjimti/go-echo
          ports:
            - name: tcp-echo-port
              containerPort: 2701
          env:
            - name: TCP_PORT
              value: "2701"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
---
